{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jose/Desktop/Pokedex/client/src/components/evolution/Evolution.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport EvolutionStage from '../evolution-stage/EvolutionStage';\n\nconst Evolution = ({\n  species,\n  background\n}) => {\n  _s();\n\n  const [evolutionData, setEvolutionData] = useState(null);\n  let evolutionPhase = [species];\n\n  const fetchEvolution = async () => {\n    const destructure = species.url.split('/');\n    const speciesID = destructure[destructure.length - 2];\n    const evolutionUrl = await fetch(`http://localhost:8080/pokemonSpecies/${speciesID}`).then(async res => res.url).catch(err => `Could not find evolution URL: ${err}`);\n    const destructureEvolution = evolutionUrl.split('/');\n    console.log(destructureEvolution);\n    const evolutionID = destructureEvolution[destructureEvolution.length - 1];\n    console.log(evolutionID);\n    fetch(`http://localhost:8080/pokemonEvolution/${evolutionID}`).then(async res => {\n      const data = await res.json();\n      setEvolutionData(res.data.chain);\n    }).catch(err => `Could not find evolution chain: ${err}`);\n  };\n\n  console.log(evolutionData, '=== evolutionData');\n  useEffect(() => fetchEvolution(), [evolutionData]);\n\n  if (evolutionData !== null) {\n    console.log(evolutionData);\n    evolutionData.evolves_to.map(evolve => {\n      if (evolve.species) {\n        console.log(evolve.species);\n        evolutionPhase = [...evolutionPhase, evolve.species];\n      }\n\n      if (evolve.evolves_to.length > 0) {\n        console.log(evolve.evolves_to);\n        evolutionPhase = [...evolutionPhase, evolve.evolves_to[0].species];\n      }\n\n      return;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `evolution-chart ${background}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Evolution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), evolutionPhase.map((phase, i) => {\n      const urlSplit = phase.url.split('/');\n      const pokemonID = urlSplit[urlSplit.length - 2];\n      return /*#__PURE__*/_jsxDEV(EvolutionStage, {\n        pokemon: phase.name,\n        pokemonId: pokemonID\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 24\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Evolution, \"a6KjEYKxDXB7Amnl75q1smDyW1I=\");\n\n_c = Evolution;\nexport default Evolution;\n\nvar _c;\n\n$RefreshReg$(_c, \"Evolution\");","map":{"version":3,"sources":["/Users/jose/Desktop/Pokedex/client/src/components/evolution/Evolution.js"],"names":["React","useState","useEffect","EvolutionStage","Evolution","species","background","evolutionData","setEvolutionData","evolutionPhase","fetchEvolution","destructure","url","split","speciesID","length","evolutionUrl","fetch","then","res","catch","err","destructureEvolution","console","log","evolutionID","data","json","chain","evolves_to","map","evolve","phase","i","urlSplit","pokemonID","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport EvolutionStage from '../evolution-stage/EvolutionStage';\n\nconst Evolution = ({ species, background }) => {\n    const [evolutionData, setEvolutionData] = useState(null);\n    let evolutionPhase = [species];\n    \n    const fetchEvolution = async () => {\n        const destructure = species.url.split('/');\n        const speciesID = destructure[destructure.length - 2];\n\n        const evolutionUrl = await fetch(`http://localhost:8080/pokemonSpecies/${speciesID}`)\n            .then(async res => res.url)\n            .catch(err => `Could not find evolution URL: ${err}`)\n\n        const destructureEvolution = evolutionUrl.split('/');\n        console.log(destructureEvolution)\n        const evolutionID = destructureEvolution[destructureEvolution.length - 1];\n        console.log(evolutionID)\n\n        fetch(`http://localhost:8080/pokemonEvolution/${evolutionID}`)\n            .then(async res => {\n                const data = await res.json();\n                setEvolutionData(res.data.chain)\n            })\n            .catch(err => `Could not find evolution chain: ${err}`)\n    }\n\n    console.log(evolutionData, '=== evolutionData')\n\n    useEffect(() => fetchEvolution(), [evolutionData]);\n\n    if (evolutionData !== null) {\n        console.log(evolutionData)\n        evolutionData.evolves_to.map(evolve => {\n            if (evolve.species) {\n                console.log(evolve.species)\n                evolutionPhase = [...evolutionPhase, evolve.species];\n            }\n\n            if (evolve.evolves_to.length > 0) {\n                console.log(evolve.evolves_to)\n                evolutionPhase = [...evolutionPhase, evolve.evolves_to[0].species];\n            }\n\n            return\n        })\n    }\n\n    return (\n        <div className={`evolution-chart ${background}`}>\n            <h3>Evolution</h3>\n            { evolutionPhase.map((phase, i) => {\n                const urlSplit = phase.url.split('/');\n                const pokemonID = urlSplit[urlSplit.length - 2];\n                return <EvolutionStage key={i} pokemon={phase.name} pokemonId={pokemonID} />\n            }) }\n        </div>\n    )\n}\n\nexport default Evolution;"]},"metadata":{},"sourceType":"module"}