{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jose/Desktop/Pokedex/client/src/components/evolution/Evolution.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport EvolutionStage from '../evolution-stage/EvolutionStage';\n\nconst Evolution = ({\n  pokemonID,\n  species\n}) => {\n  _s();\n\n  const [evolutionData, setEvolutionData] = useState(null);\n  let evolutionPhase = [species];\n\n  const fetchEvolution = () => {\n    fetch(`http://localhost:8080/pokemonEvolution/${pokemonID}`).then(async res => {\n      const evolution = await res.json();\n      setEvolutionData(evolution.chain);\n    });\n  };\n\n  useEffect(() => fetchEvolution(), []);\n\n  if (evolutionData !== null) {\n    evolutionData.evolves_to.map(evolve => {\n      if (evolve.species) {\n        evolutionPhase = [...evolutionPhase, evolve.species];\n      }\n\n      if (evolve.evolves_to) {\n        evolutionPhase = [...evolutionPhase, evolve.evolves_to[0].species];\n      }\n\n      return;\n    });\n  }\n\n  console.log(evolutionData, '== Evolution ==');\n  console.log(evolutionPhase);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: evolutionPhase.map(phase => /*#__PURE__*/_jsxDEV(EvolutionStage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 43\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Evolution, \"a6KjEYKxDXB7Amnl75q1smDyW1I=\");\n\n_c = Evolution;\nexport default Evolution;\n\nvar _c;\n\n$RefreshReg$(_c, \"Evolution\");","map":{"version":3,"sources":["/Users/jose/Desktop/Pokedex/client/src/components/evolution/Evolution.js"],"names":["React","useState","useEffect","EvolutionStage","Evolution","pokemonID","species","evolutionData","setEvolutionData","evolutionPhase","fetchEvolution","fetch","then","res","evolution","json","chain","evolves_to","map","evolve","console","log","phase"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,mCAA3B;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA4B;AAAA;;AAC1C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,IAAD,CAAlD;AACA,MAAIQ,cAAc,GAAG,CAACH,OAAD,CAArB;;AAEA,QAAMI,cAAc,GAAG,MAAM;AACzBC,IAAAA,KAAK,CAAE,0CAAyCN,SAAU,EAArD,CAAL,CACKO,IADL,CACU,MAAMC,GAAN,IAAa;AACf,YAAMC,SAAS,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAxB;AACAP,MAAAA,gBAAgB,CAACM,SAAS,CAACE,KAAX,CAAhB;AACH,KAJL;AAKH,GAND;;AAQAd,EAAAA,SAAS,CAAC,MAAMQ,cAAc,EAArB,EAAyB,EAAzB,CAAT;;AAEA,MAAIH,aAAa,KAAK,IAAtB,EAA4B;AACxBA,IAAAA,aAAa,CAACU,UAAd,CAAyBC,GAAzB,CAA6BC,MAAM,IAAI;AACnC,UAAIA,MAAM,CAACb,OAAX,EAAoB;AAChBG,QAAAA,cAAc,GAAG,CAAC,GAAGA,cAAJ,EAAoBU,MAAM,CAACb,OAA3B,CAAjB;AACH;;AAED,UAAIa,MAAM,CAACF,UAAX,EAAuB;AACnBR,QAAAA,cAAc,GAAG,CAAC,GAAGA,cAAJ,EAAoBU,MAAM,CAACF,UAAP,CAAkB,CAAlB,EAAqBX,OAAzC,CAAjB;AACH;;AAED;AACH,KAVD;AAWH;;AAEDc,EAAAA,OAAO,CAACC,GAAR,CAAYd,aAAZ,EAA2B,iBAA3B;AACAa,EAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AAEA,sBACI;AAAA,cACMA,cAAc,CAACS,GAAf,CAAmBI,KAAK,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAA5B;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CArCD;;GAAMlB,S;;KAAAA,S;AAuCN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport EvolutionStage from '../evolution-stage/EvolutionStage';\n\nconst Evolution = ({ pokemonID, species }) => {\n    const [evolutionData, setEvolutionData] = useState(null);\n    let evolutionPhase = [species];\n    \n    const fetchEvolution = () => {\n        fetch(`http://localhost:8080/pokemonEvolution/${pokemonID}`)\n            .then(async res => {\n                const evolution = await res.json();\n                setEvolutionData(evolution.chain);\n            })\n    }\n\n    useEffect(() => fetchEvolution(), []);\n\n    if (evolutionData !== null) {\n        evolutionData.evolves_to.map(evolve => {\n            if (evolve.species) {\n                evolutionPhase = [...evolutionPhase, evolve.species];\n            }\n\n            if (evolve.evolves_to) {\n                evolutionPhase = [...evolutionPhase, evolve.evolves_to[0].species];\n            }\n\n            return\n        })\n    }\n\n    console.log(evolutionData, '== Evolution ==')\n    console.log(evolutionPhase)\n\n    return (\n        <div>\n            { evolutionPhase.map(phase => <EvolutionStage />) }\n            \n        </div>\n    )\n}\n\nexport default Evolution;"]},"metadata":{},"sourceType":"module"}